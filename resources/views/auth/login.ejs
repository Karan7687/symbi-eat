<!-- working -->
<section
  class="login-section py-6 bg-[#F8F9FA] min-h-[calc(100vh-80px)] flex items-center"
>
  <div class="container mx-auto px-4 flex items-center justify-center">
    <div
      class="login-container bg-white rounded-xl shadow-lg overflow-hidden w-full max-w-4xl flex flex-col md:flex-row"
    >
      <!-- Success Message Overlay (Hidden by default) -->
      <div
        id="successMessage"
        class="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-70 transform scale-0 opacity-0 transition-all duration-500"
        style="display: none"
      >
        <div
          class="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full mx-4 relative overflow-hidden"
        >
          <!-- Success content -->
          <div class="relative z-10 text-center">
            <!-- Animated confetti background -->
            <div id="confettiCanvas" class="absolute inset-0 z-0"></div>

            <!-- Success icon with animation -->
            <div
              class="w-24 h-24 bg-[#1D3557] bg-opacity-10 rounded-full mx-auto flex items-center justify-center mb-6 relative"
            >
              <div
                class="absolute inset-0 rounded-full border-4 border-[#E8C547] animate-ping opacity-30"
              ></div>
              <div
                id="successIcon"
                class="text-4xl transform transition-transform duration-700 rotate-0 scale-100"
              >
                üëã
              </div>
            </div>

            <h2 class="text-3xl font-bold text-[#1D3557] mb-4">
              Welcome Back!
            </h2>

            <div class="mb-6 relative">
              <div
                class="absolute inset-0 bg-gradient-to-r from-[#1D3557] to-[#E8C547] opacity-10 rounded-lg"
              ></div>
              <div
                id="typingText"
                class="text-[#1D3557] font-medium p-4 text-lg"
              ></div>
            </div>

            <div
              class="bg-[#1D3557] bg-opacity-10 rounded-xl p-4 mb-6 transform transition-all duration-500 translate-y-10 opacity-0"
              id="foodSuggestions"
            >
              <p class="text-[#1D3557] font-medium">üî• Hot Right Now</p>
              <div class="flex justify-between mt-2">
                <div
                  class="text-center bg-white bg-opacity-50 rounded-lg p-2 flex-1 mx-1 hover:bg-[#E8C547] hover:bg-opacity-20 transition-all duration-300 transform hover:scale-105 cursor-pointer"
                >
                  <div class="text-2xl">üçï</div>
                  <p class="text-sm font-bold">Pizza</p>
                </div>
                <div
                  class="text-center bg-white bg-opacity-50 rounded-lg p-2 flex-1 mx-1 hover:bg-[#E8C547] hover:bg-opacity-20 transition-all duration-300 transform hover:scale-105 cursor-pointer"
                >
                  <div class="text-2xl">üçî</div>
                  <p class="text-sm font-bold">Burger</p>
                </div>
                <div
                  class="text-center bg-white bg-opacity-50 rounded-lg p-2 flex-1 mx-1 hover:bg-[#E8C547] hover:bg-opacity-20 transition-all duration-300 transform hover:scale-105 cursor-pointer"
                >
                  <div class="text-2xl">üçú</div>
                  <p class="text-sm font-bold">Ramen</p>
                </div>
              </div>
            </div>

            <a
              href="/home"
              id="continueButton"
              class="w-full bg-[#112240] hover:bg-[#1a2e50] text-white font-bold py-3 rounded-lg transition-colors duration-300 relative overflow-hidden group block"
            >
              <span class="relative z-10 flex items-center justify-center">
                <span class="mr-2">üçΩÔ∏è</span>
                Take Me to Food
              </span>
              <span
                class="absolute inset-0 bg-[#E8C547] transform translate-y-full group-hover:translate-y-0 transition-transform duration-300"
              ></span>
            </a>
          </div>
        </div>
      </div>

      <!-- Left side - Image and humor -->
      <div
        class="bg-[#1D3557] p-8 md:p-10 flex flex-col justify-center md:w-5/12 relative"
      >
        <!-- Animated food background -->
        <div
          class="food-animation absolute inset-0 overflow-hidden"
          id="foodAnimation"
        ></div>

        <div class="relative z-10">
          <h2 class="text-white text-3xl font-bold mb-4">Welcome Back!</h2>
          <p class="text-[#E5E7EB] mb-6">
            Your stomach has been waiting for this reunion.
          </p>

          <div class="bg-white bg-opacity-10 rounded-xl p-5 mb-5">
            <h3 class="text-[#E8C547] text-xl font-semibold mb-3">
              Today's Mood:
            </h3>
            <div class="flex justify-between">
              <div class="text-center">
                <div class="text-3xl">üìö</div>
                <p class="text-white text-xs mt-1">Studying</p>
              </div>
              <div class="text-center transform scale-110">
                <div class="text-3xl">üçî</div>
                <p class="text-white text-xs mt-1">Eating</p>
              </div>
              <div class="text-center">
                <div class="text-3xl">üò¥</div>
                <p class="text-white text-xs mt-1">Sleeping</p>
              </div>
            </div>
          </div>

          <div class="bg-white bg-opacity-10 rounded-xl p-5">
            <h3 class="text-[#E8C547] text-xl font-semibold mb-2">
              Student Wisdom:
            </h3>
            <p class="text-white italic text-sm">
              "The only thing I remember from my 8am class is what I ate for
              breakfast."
            </p>
          </div>
        </div>
      </div>

      <!-- Right side - Login form -->
      <div class="p-8 md:p-10 md:w-7/12">
        <h1 class="text-2xl font-bold text-[#1D3557] mb-1">
          Log In to SymbiEat
        </h1>

        <!-- Error message container (initially hidden) -->
        <% if (typeof error !== 'undefined') { %>
        <div
          id="errorMessage"
          class="bg-red-100 border-l-4 border-red-500 text-red-700 p-3 mb-4 rounded animate-bounce-once"
        >
          <div class="flex items-center">
            <div class="text-xl mr-2 animate-pulse">üòÖ</div>
            <p><%= error %></p>
          </div>
        </div>
        <% } %>

        <!-- Fun error message (hidden by default) -->
        <div
          id="funErrorMessage"
          class="bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-3 mb-4 rounded hidden"
        >
          <div class="flex items-center">
            <div class="text-xl mr-2 animate-bounce" id="errorEmoji">ü§î</div>
            <div class="flex-1">
              <p id="errorText" class="mb-1">Hmm, that doesn't look right...</p>
              <div
                id="errorProgress"
                class="w-full bg-orange-200 rounded-full h-1.5 overflow-hidden"
              >
                <div
                  class="bg-orange-500 h-full w-0 transition-all duration-3000"
                ></div>
              </div>
            </div>
          </div>
        </div>

        <form id="loginForm" action="/login" method="POST">
          <% if(messages.error){%>
          <span class="text-red-500 text-sm"> <%= messages.error%> </span>
          <%}%>
          <div class="mb-5">
            <label class="block text-[#1D3557] font-semibold mt-4" for="email"
              >Email Address</label
            >
            <div class="relative">
              <input
                type="email"
                id="email"
                name="email"
                class="w-full px-4 py-3 border-2 border-[#E5E7EB] rounded-lg focus:outline-none focus:border-[#E8C547] focus:ring-2 focus:ring-[#E8C547] focus:ring-opacity-20"
                placeholder="Where assignments are always late (.edu)"
                required
                autocomplete="email"
                value="<%= typeof email !== 'undefined' ? email : '' %>"
              />
              <div
                id="emailSuggestions"
                class="absolute z-10 bg-white w-full border border-gray-200 rounded-lg shadow-lg mt-1 hidden"
              >
                <!-- Email suggestions will be populated here -->
              </div>
            </div>
          </div>

          <div class="mb-2">
            <label class="block text-[#1D3557] font-semibold" for="password"
              >Password</label
            >
            <div class="relative">
              <input
                type="password"
                id="password"
                name="password"
                class="w-full px-4 py-3 border-2 border-[#E5E7EB] rounded-lg focus:outline-none focus:border-[#E8C547] focus:ring-2 focus:ring-[#E8C547] focus:ring-opacity-20"
                placeholder="The one you always forget"
                required
              />
              <button
                type="button"
                class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500"
                onclick="togglePassword()"
              >
                üëÅÔ∏è
              </button>
              <div
                id="passwordEmoji"
                class="absolute left-4 top-1/2 transform -translate-y-1/2 opacity-0 transition-opacity duration-300"
              ></div>
            </div>
            <div
              id="passwordStrengthMessage"
              class="text-xs text-gray-500 mt-1 h-4"
            ></div>
          </div>

          <div class="flex items-center justify-between mb-5">
            <a
              href="/forgot-password"
              class="text-sm text-[#1D3557] hover:underline"
            >
              Forgot password? (We all do)
            </a>
          </div>

          <button
            type="submit"
            class="w-full bg-[#112240] hover:bg-[#1a2e50] text-white font-bold py-3 rounded-lg transition-colors duration-300 relative overflow-hidden group"
          >
            <span class="relative z-10 flex items-center justify-center">
              <span class="mr-2">üöÄ</span>
              Login
            </span>
            <span
              class="absolute inset-0 bg-[#E8C547] transform translate-y-full group-hover:translate-y-0 transition-transform duration-300"
            ></span>
            <span
              class="absolute inset-0 bg-[#E8C547] opacity-20 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-700 origin-left"
            ></span>
          </button>
        </form>

        <div class="relative flex items-center my-6">
          <div class="flex-grow border-t border-gray-300"></div>
          <span class="flex-shrink mx-4 text-gray-600 text-xs"
            >OR CONTINUE WITH</span
          >
          <div class="flex-grow border-t border-gray-300"></div>
        </div>

        <div class="grid grid-cols-2 gap-4 mb-5">
          <button
            class="flex items-center justify-center py-2 px-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-300"
          >
            <span class="mr-2 font-semibold">G</span> Google
          </button>
          <button
            class="flex items-center justify-center py-2 px-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-300"
          >
            <span class="mr-2 font-semibold">f</span> Facebook
          </button>
        </div>

        <div class="text-center">
          <p class="text-gray-600 text-sm">
            New to SymbiEat?
            <a
              href="/register"
              class="text-[#1D3557] font-semibold hover:underline"
              >Create an account</a
            >
          </p>
        </div>

        <p class="text-center text-xs text-gray-500 mt-4">
          Fun fact: 9 out of 10 students log in faster when they're hungry.
        </p>
      </div>
    </div>
  </div>

  <script>
    // Store previously used emails in localStorage
    const recentEmails = JSON.parse(
      localStorage.getItem("recentEmails") || "[]"
    );

    // Email suggestions functionality
    const emailInput = document.getElementById("email");
    const emailSuggestions = document.getElementById("emailSuggestions");

    // Add current email to recent emails if not already there
    if (emailInput.value && !recentEmails.includes(emailInput.value)) {
      recentEmails.unshift(emailInput.value);
      // Keep only the last 5 emails
      if (recentEmails.length > 5) {
        recentEmails.pop();
      }
      localStorage.setItem("recentEmails", JSON.stringify(recentEmails));
    }

    // Show email suggestions when input is focused
    emailInput.addEventListener("focus", function () {
      if (recentEmails.length > 0) {
        showEmailSuggestions();
      }
    });

    // Hide suggestions when clicking outside
    document.addEventListener("click", function (e) {
      if (e.target !== emailInput && e.target !== emailSuggestions) {
        emailSuggestions.classList.add("hidden");
      }
    });

    // Show email suggestions
    function showEmailSuggestions() {
      emailSuggestions.innerHTML = "";

      recentEmails.forEach((email) => {
        const div = document.createElement("div");
        div.className =
          "px-4 py-2 hover:bg-gray-100 cursor-pointer flex items-center";
        div.innerHTML = `
                  <span class="mr-2">üìß</span>
                  <span>${email}</span>
                `;
        div.addEventListener("click", function () {
          emailInput.value = email;
          emailSuggestions.classList.add("hidden");
          document.getElementById("password").focus();
        });
        emailSuggestions.appendChild(div);
      });

      emailSuggestions.classList.remove("hidden");
    }

    // Fun password interactions
    const passwordInput = document.getElementById("password");
    const passwordEmoji = document.getElementById("passwordEmoji");
    const passwordStrengthMessage = document.getElementById(
      "passwordStrengthMessage"
    );

    const funnyPasswordMessages = [
      "That's a secret worth keeping! ü§ê",
      "Ooh, very mysterious! üïµÔ∏è",
      "Is that your pet's name? üê∂",
      "Not 'password123' again... üôÑ",
      "Fort Knox level security! üîí",
      "Your crush's name? Bold choice! üíò",
    ];

    const passwordEmojis = ["üîí", "üîë", "ü§´", "üòé", "ü¶∏‚Äç‚ôÇÔ∏è", "üïµÔ∏è‚Äç‚ôÄÔ∏è", "ü¶π‚Äç‚ôÄÔ∏è"];

    passwordInput.addEventListener("input", function () {
      // Show random emoji when typing starts
      if (this.value.length === 1) {
        const randomEmoji =
          passwordEmojis[Math.floor(Math.random() * passwordEmojis.length)];
        passwordEmoji.textContent = randomEmoji;
        passwordEmoji.style.opacity = "1";

        // Move input text to make room for emoji
        this.style.paddingLeft = "2.5rem";
      } else if (this.value.length === 0) {
        // Reset when empty
        passwordEmoji.style.opacity = "0";
        this.style.paddingLeft = "1rem";
      }

      // Show funny message based on password length
      if (this.value.length > 0) {
        const randomMessage =
          funnyPasswordMessages[
            Math.floor(Math.random() * funnyPasswordMessages.length)
          ];
        passwordStrengthMessage.textContent = randomMessage;
      } else {
        passwordStrengthMessage.textContent = "";
      }
    });

    // Toggle password visibility
    function togglePassword() {
      const passwordField = document.getElementById("password");
      if (passwordField.type === "password") {
        passwordField.type = "text";
      } else {
        passwordField.type = "password";
      }
    }

    // Check if login was successful (this will be set by your backend)
    const obj = {
      passWord:
        "<%= (typeof success !== 'undefined' && success) ? 'true' : 'false' %>",
    };

    // Show success message if login was successful
    const isLoginSuccessful = obj.passWord === "true";
    if (isLoginSuccessful) {
      showSuccessMessage();
    }

    // Function to show success message with enhanced animations
    function showSuccessMessage() {
      const successMessage = document.getElementById("successMessage");
      const foodSuggestions = document.getElementById("foodSuggestions");
      const successIcon = document.getElementById("successIcon");
      successMessage.style.display = "flex";

      // Create confetti effect
      createConfetti();

      // Start typing animation
      const typingText = document.getElementById("typingText");
      const textToType =
        "We've been expecting you! Your favorite foods are waiting...";
      let i = 0;

      function typeWriter() {
        if (i < textToType.length) {
          typingText.innerHTML += textToType.charAt(i);
          i++;
          setTimeout(typeWriter, 50);
        } else {
          // After typing is complete, show food suggestions with animation
          setTimeout(() => {
            foodSuggestions.classList.remove("translate-y-10", "opacity-0");
          }, 300);
        }
      }

      // Trigger animations after a small delay
      setTimeout(() => {
        successMessage.classList.add("scale-100", "opacity-100");
        successMessage.classList.remove("scale-0", "opacity-0");

        // Animate the success icon
        successIcon.classList.add("rotate-360");

        // Start typing animation
        typeWriter();

        // Change emoji after animation
        setTimeout(() => {
          successIcon.textContent = "üéâ";
          successIcon.classList.add("scale-110");
        }, 700);
      }, 100);

      // Redirect after a delay if auto-redirect is enabled
      setTimeout(() => {
        window.location.href = "/home";
      }, 5000);
    }

    // Create confetti effect for success message
    function createConfetti() {
      const canvas = document.getElementById("confettiCanvas");
      const colors = ["#E8C547", "#1D3557", "#FF6B6B", "#4ECDC4", "#F7FFF7"];

      for (let i = 0; i < 100; i++) {
        const confetti = document.createElement("div");
        confetti.className = "absolute rounded-sm";

        // Random properties
        const size = Math.random() * 10 + 5;
        const color = colors[Math.floor(Math.random() * colors.length)];

        confetti.style.width = `${size}px`;
        confetti.style.height = `${size}px`;
        confetti.style.backgroundColor = color;
        confetti.style.left = `${Math.random() * 100}%`;
        confetti.style.top = `${Math.random() * 100}%`;
        confetti.style.opacity = Math.random().toString();

        // Animation
        confetti.style.animation = `confettiFall ${
          Math.random() * 3 + 2
        }s linear forwards`;
        confetti.style.transform = `rotate(${Math.random() * 360}deg)`;

        canvas.appendChild(confetti);
      }
    }

    // Fun error messages for wrong credentials with enhanced animations
    const funErrorMessages = [
      {
        text: "Hmm, that password is as forgotten as your homework!",
        emoji: "ü§î",
      },
      {
        text: "Nice try! But your password and my diet have something in common - they both failed.",
        emoji: "üòÖ",
      },
      {
        text: "Password incorrect! Did your roommate change it again?",
        emoji: "üïµÔ∏è",
      },
      {
        text: "That's not it! Maybe try the name of the food you were craving during your last exam?",
        emoji: "üçï",
      },
      {
        text: "Wrong password! Is Mercury in retrograde or something?",
        emoji: "ü™ê",
      },
      {
        text: "Nope! That password is as wrong as putting pineapple on pizza.",
        emoji: "üçç",
      },
      {
        text: "Error 404: Brain cells not found. Try another password!",
        emoji: "üß†",
      },
      {
        text: "That's as wrong as showing up to the wrong lecture hall on exam day!",
        emoji: "üìù",
      },
      {
        text: "Your password is like my meal plan - insufficient!",
        emoji: "üçΩÔ∏è",
      },
    ];

    // Check if there was a login error from the backend
    const hasLoginError =
      "<%= typeof error !== 'undefined' ? 'true' : 'false' %>";

    // If there was an error but no error message is displayed yet, show a fun one
    if (hasLoginError === "true") {
      // Check if the standard error message exists and is visible
      const standardError = document.getElementById("errorMessage");
      if (!standardError || standardError.classList.contains("hidden")) {
        showFunErrorMessage();
      } else {
        // Add animation to the standard error message
        standardError.classList.add("animate-bounce-once");
      }
    }

    // Function to show fun error message with animation
    function showFunErrorMessage() {
      const randomError =
        funErrorMessages[Math.floor(Math.random() * funErrorMessages.length)];
      const funErrorMessage = document.getElementById("funErrorMessage");
      const errorProgress =
        document.getElementById("errorProgress").firstElementChild;

      document.getElementById("errorEmoji").textContent = randomError.emoji;
      document.getElementById("errorText").textContent = randomError.text;

      // Show with animation
      funErrorMessage.classList.remove("hidden");
      funErrorMessage.classList.add("animate-shake");

      // Animate progress bar
      errorProgress.style.width = "100%";

      // Remove shake after animation completes
      setTimeout(() => {
        funErrorMessage.classList.remove("animate-shake");
      }, 820);

      // Hide error after a delay
      setTimeout(() => {
        funErrorMessage.classList.add("scale-95", "opacity-0");
        setTimeout(() => {
          funErrorMessage.classList.add("hidden");
          errorProgress.style.width = "0";
        }, 500);
      }, 5000);
    }

    // Create falling food animation
    const foodEmojis = [
      "üçï",
      "üçî",
      "üçü",
      "üåÆ",
      "üç£",
      "üçú",
      "‚òï",
      "üç©",
      "üç¶",
      "ü•™",
    ];
    const animationContainer = document.getElementById("foodAnimation");

    function createFoodItem() {
      if (!animationContainer) return;

      const food = document.createElement("div");
      food.className = "absolute text-3xl opacity-20";
      food.style.left = `${Math.random() * 100}%`;
      food.style.top = "-20px";
      food.style.animation = `foodFall ${
        Math.random() * 10 + 5
      }s linear forwards`;
      food.textContent =
        foodEmojis[Math.floor(Math.random() * foodEmojis.length)];
      animationContainer.appendChild(food);

      // Remove after animation completes
      setTimeout(() => {
        food.remove();
      }, 15000);
    }

    // Create initial food items
    for (let i = 0; i < 8; i++) {
      setTimeout(createFoodItem, i * 500);
    }

    // Continue creating food items
    setInterval(createFoodItem, 2000);

    // Add keyframes for animations
    const style = document.createElement("style");
    style.textContent = `
                @keyframes foodFall {
                  0% {
                    transform: translateY(0) rotate(0deg);
                    opacity: 0;
                  }
                  10% {
                    opacity: 0.2;
                  }
                  90% {
                    opacity: 0.2;
                  }
                  100% {
                    transform: translateY(500px) rotate(360deg);
                    opacity: 0;
                  }
                }
                
                @keyframes confettiFall {
                  0% {
                    transform: translateY(-10px) rotate(0deg);
                    opacity: 1;
                  }
                  100% {
                    transform: translateY(100px) rotate(360deg);
                    opacity: 0;
                  }
                }
                
                @keyframes fadeIn {
                  0% { opacity: 0; }
                  100% { opacity: 1; }
                }
                
                @keyframes shake {
                  0%, 100% { transform: translateX(0); }
                  10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
                  20%, 40%, 60%, 80% { transform: translateX(5px); }
                }
                
                @keyframes bounce-once {
                  0%, 20%, 50%, 80%, 100% {transform: translateY(0);}
                  40% {transform: translateY(-20px);}
                  60% {transform: translateY(-10px);}
                }
                
                .animate-fadeIn {
                  animation: fadeIn 1s ease forwards;
                }
                
                .animate-shake {
                  animation: shake 0.82s cubic-bezier(.36,.07,.19,.97) both;
                }
                
                .animate-bounce-once {
                  animation: bounce-once 1s ease-in-out;
                }
                
                .animate-pulse {
                  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
                }
                
                @keyframes pulse {
                  0%, 100% {
                    opacity: 1;
                  }
                  50% {
                    opacity: 0.5;
                  }
                }
                
                .rotate-360 {
                  animation: rotate360 1.5s ease;
                }
                
                @keyframes rotate360 {
                  0% { transform: rotate(0deg) scale(1); }
                  50% { transform: rotate(180deg) scale(0.8); }
                  100% { transform: rotate(360deg) scale(1); }
                }

                /* Animation for success message */
                .scale-0 {
                  transform: scale(0);
                }

                .scale-100 {
                  transform: scale(1);
                }

                /* Reduce overall padding to prevent scrolling at 100% zoom */
                @media (min-height: 700px) {
                  .login-section {
                    padding-top: 0;
                    padding-bottom: 0;
                  }
                }
              `;
    document.head.appendChild(style);

    // For testing purposes - simulate success or error
    // Comment these out in production
    function simulateSuccessLogin() {
      showSuccessMessage();
    }

    function simulateErrorLogin() {
      showFunErrorMessage();
    }

    // Uncomment one of these to test the animations
    // setTimeout(simulateSuccessLogin, 1000); // Test success message
    // setTimeout(simulateErrorLogin, 1000);   // Test error message
  </script>
</section>
